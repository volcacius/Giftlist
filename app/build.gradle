//The order in which the plugins are applied matters
apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'com.github.triplet.play'
apply plugin: 'com.fernandocejas.frodo'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'
apply plugin: 'io.fabric'
apply from: '../config/quality/quality.gradle'

//Repositories exclusive to the app module
//Common repository are provided in the project build.gradle under allprojects
repositories {
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        applicationId 'it.polimi.dima.giftlist'
        minSdkVersion 16
        targetSdkVersion 23
        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
        versionCode 1000
        // Major -> Millions, Minor -> Thousands, Bugfix -> Hundreds. E.g 1.3.72 == 1,003,072
        versionName '0.1.0'
        buildConfigField "String", "ETSY_API_KEY", "\"${etsy_api_key}\""
        buildConfigField "String", "ETSY_SHARED_SECRET", "\"${etsy_shared_secret}\""
    }

    signingConfigs {
        // You must set up an environment var before release signing
        // Run: export APP_KEY={password}
        // TODO Add your release keystore in /keystore folder
        release {
            storeFile file('keystore/release.keystore')
            keyAlias 'androidreleasekey'
            storePassword "$System.env.APP_KEY"
            keyPassword "$System.env.APP_KEY"
        }

        debug {
            storeFile file('keystore/debug.keystore')
            keyAlias 'androiddebugkey'
            storePassword 'android'
            keyPassword 'android'
        }
    }

    //debuggable flag has to be set to be retrieved from ApplicationInfo
    buildTypes {
        release {
            debuggable false
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.betaDistributionReleaseNotesFilePath = file('../crashlytics_release_notes.txt').absolutePath
        }
        debug {
            signingConfig signingConfigs.debug
            versionNameSuffix " Debug"
            debuggable true
            minifyEnabled false
        }
    }

    sourceSets {
        test {
            java.srcDir 'src/commonTest/java'
        }
        androidTest {
            java.srcDir 'src/commonTest/java'
        }

    }

    //Needed because of this https://github.com/square/okio/issues/58
    lintOptions {
        warning 'InvalidPackage'
    }
    //Required by retrolambda to inform the IDE of the language level
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

//configuration of the triplet play publisher plugin
play {
    serviceAccountEmail = 'your-service-account-email'
    pk12File = file('key.p12')
    // By default publishes to Alpha channel
    track = 'alpha'
}

dependencies {
    final PLAY_SERVICES_VERSION = '8.4.0'
    final SUPPORT_LIBRARY_VERSION = '23.1.1'
    final RETROFIT_VERSION = '2.0.0-beta4'
    final DAGGER_VERSION = '2.0.2'
    final DEXMAKER_VERSION = '1.4'
    final HAMCREST_VERSION = '1.3'
    final ESPRESSO_VERSION = '2.2.1'
    final RUNNER_VERSION = '0.4'
    final ICEPICK_VERSION = '3.2.0'
    final EVENTBUS_VERSION = '3.0.0'
    final OKHTTP_VERSION = '3.1.2'
    final FRAGMENT_ARGS_VERSION = '3.0.2'
    final SWIPE_CARD_VERSION = '1.0.9@aar'
    final JUNIT_VERSION = '4.12'
    final MOCKITO_VERSION = '1.10.19'
    final MOSBY_VERSION = '2.0.1'
    final ANNOTATED_ADAPTER_VERSION = '1.1.1'
    final PICASSO_VERSION = '2.5.2'
    final JAVAX_ANNOTATION_VERSION = '10.0-b28'
    final SQL_BRITE_VERSION = '0.4.1'
    final RX_JAVA_VERSION = '1.1.0'
    final RX_ANDROID_VERSION = '1.1.0'
    final BUTTERKNIFE_VERSION = '7.0.1'
    final TIMBER_VERSION = '4.1.0'
    final CRASHLYTICS_VERSION = '2.5.5@aar'
    final ROBOELECTRIC_VERSION = '3.0'
    final TAKT_VERSION = '1.0.2'
    final BLOCK_CANARY_VERSION = '1.2.0'
    final LEAK_CANARY_VERSION = '1.4-beta2'
    final STETHO_VERSION = '1.3.1'
    final STOREIO_VERSION = '1.8.0'

    // "compile" refers to the dependencies required to compile the production source of the project.
    //The .jar in the libs folder are included as dependencies
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.google.android.gms:play-services-gcm:$PLAY_SERVICES_VERSION"
    compile "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:cardview-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:support-annotations:$SUPPORT_LIBRARY_VERSION"
    compile "org.greenrobot:eventbus:$EVENTBUS_VERSION"
    compile "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
    compile "com.squareup.retrofit2:converter-gson:$RETROFIT_VERSION"
    compile ("com.squareup.retrofit2:converter-simplexml:$RETROFIT_VERSION"){
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }
    compile "com.squareup.retrofit2:adapter-rxjava:$RETROFIT_VERSION"
    compile "com.squareup.okhttp3:okhttp:$OKHTTP_VERSION"
    compile "com.google.code.gson:gson:2.4"
    compile "com.google.dagger:dagger:$DAGGER_VERSION"
    compile "com.lorentzos.swipecards:library:$SWIPE_CARD_VERSION"
    compile "frankiesardo:icepick:$ICEPICK_VERSION"
    compile "com.hannesdorfmann.fragmentargs:annotation:$FRAGMENT_ARGS_VERSION"
    compile "com.hannesdorfmann.mosby:mvp:$MOSBY_VERSION"
    compile "com.hannesdorfmann.mosby:viewstate:$MOSBY_VERSION"
    compile "com.hannesdorfmann.annotatedadapter:annotation:$ANNOTATED_ADAPTER_VERSION"
    compile "com.hannesdorfmann.annotatedadapter:support-recyclerview:$ANNOTATED_ADAPTER_VERSION"
    compile "com.squareup.picasso:picasso:$PICASSO_VERSION"
    compile "com.squareup.sqlbrite:sqlbrite:$SQL_BRITE_VERSION"
    compile "io.reactivex:rxandroid:$RX_ANDROID_VERSION"
    compile "io.reactivex:rxjava:$RX_JAVA_VERSION"
    compile "com.jakewharton:butterknife:$BUTTERKNIFE_VERSION"
    compile "com.pushtorefresh.storio:sqlite:$STOREIO_VERSION"
    compile "com.pushtorefresh.storio:content-resolver:$STOREIO_VERSION"
    compile "com.pushtorefresh.storio:sqlite-annotations:$STOREIO_VERSION"
    compile("com.crashlytics.sdk.android:crashlytics:$CRASHLYTICS_VERSION") {
        transitive = true;
    }

    //dependencies provided on compile only on debug builds
    debugCompile "com.jakewharton.timber:timber:$TIMBER_VERSION"
    debugCompile "jp.wasabeef:takt:$TAKT_VERSION"
    debugCompile "com.github.moduth:blockcanary-ui:$BLOCK_CANARY_VERSION"
    debugCompile "com.squareup.leakcanary:leakcanary-android:$LEAK_CANARY_VERSION"
    debugCompile "com.facebook.stetho:stetho:$STETHO_VERSION"
    debugCompile "com.facebook.stetho:stetho-okhttp3:$STETHO_VERSION"

    //dependencies provided on compile only on release builds
    //no-op dependencies allows to build while providing an empty dependency for something that is needed only in debug build
    releaseCompile "com.github.moduth:blockcanary-no-op:$BLOCK_CANARY_VERSION"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$LEAK_CANARY_VERSION"

    provided "frankiesardo:icepick-processor:$ICEPICK_VERSION"
    //Required by Dagger 2
    provided "org.glassfish:javax.annotation:$JAVAX_ANNOTATION_VERSION"

    // Instrumentation test dependencies
    androidTestCompile "junit:junit:$JUNIT_VERSION"
    androidTestCompile "org.mockito:mockito-core:$MOCKITO_VERSION"
    androidTestCompile "com.android.support:support-annotations:$SUPPORT_LIBRARY_VERSION"
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$ESPRESSO_VERSION") {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    androidTestCompile "com.android.support.test.espresso:espresso-core:$ESPRESSO_VERSION"
    androidTestCompile "com.android.support.test:runner:$RUNNER_VERSION"
    androidTestCompile "com.android.support.test:rules:$RUNNER_VERSION"
    androidTestCompile "com.crittercism.dexmaker:dexmaker:$DEXMAKER_VERSION"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-dx:$DEXMAKER_VERSION"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-mockito:$DEXMAKER_VERSION"

    // The dependencies required to compile the test source of the project.
    // By default, also includes the compiled production classes and the compile time dependencies.
    testCompile "junit:junit:$JUNIT_VERSION"
    testCompile "org.mockito:mockito-core:$MOCKITO_VERSION"
    testCompile "org.hamcrest:hamcrest-core:$HAMCREST_VERSION"
    testCompile "org.hamcrest:hamcrest-library:$HAMCREST_VERSION"
    testCompile "org.hamcrest:hamcrest-integration:$HAMCREST_VERSION"
    testCompile "org.robolectric:robolectric:$ROBOELECTRIC_VERSION"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$LEAK_CANARY_VERSION"

    // APT dependencies
    //testApt and androidTestApt are gradle configurations provided by apt plugin
    //to specify that testing code requires to access the code generated by those dependencies
    apt "com.hannesdorfmann.annotatedadapter:processor:$ANNOTATED_ADAPTER_VERSION"
    apt "com.hannesdorfmann.fragmentargs:processor:$FRAGMENT_ARGS_VERSION"
    apt "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
    apt "com.pushtorefresh.storio:sqlite-annotations-processor:$STOREIO_VERSION"
    testApt "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
    androidTestApt "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
}

// Log out test results to console
tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}